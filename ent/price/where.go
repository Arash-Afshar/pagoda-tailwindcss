// Code generated by ent, DO NOT EDIT.

package price

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldID, id))
}

// StripeID applies equality check predicate on the "stripe_id" field. It's identical to StripeIDEQ.
func StripeID(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldStripeID, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldAmount, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldQuantity, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedAt, v))
}

// StripeIDEQ applies the EQ predicate on the "stripe_id" field.
func StripeIDEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldStripeID, v))
}

// StripeIDNEQ applies the NEQ predicate on the "stripe_id" field.
func StripeIDNEQ(v string) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldStripeID, v))
}

// StripeIDIn applies the In predicate on the "stripe_id" field.
func StripeIDIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldStripeID, vs...))
}

// StripeIDNotIn applies the NotIn predicate on the "stripe_id" field.
func StripeIDNotIn(vs ...string) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldStripeID, vs...))
}

// StripeIDGT applies the GT predicate on the "stripe_id" field.
func StripeIDGT(v string) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldStripeID, v))
}

// StripeIDGTE applies the GTE predicate on the "stripe_id" field.
func StripeIDGTE(v string) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldStripeID, v))
}

// StripeIDLT applies the LT predicate on the "stripe_id" field.
func StripeIDLT(v string) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldStripeID, v))
}

// StripeIDLTE applies the LTE predicate on the "stripe_id" field.
func StripeIDLTE(v string) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldStripeID, v))
}

// StripeIDContains applies the Contains predicate on the "stripe_id" field.
func StripeIDContains(v string) predicate.Price {
	return predicate.Price(sql.FieldContains(FieldStripeID, v))
}

// StripeIDHasPrefix applies the HasPrefix predicate on the "stripe_id" field.
func StripeIDHasPrefix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasPrefix(FieldStripeID, v))
}

// StripeIDHasSuffix applies the HasSuffix predicate on the "stripe_id" field.
func StripeIDHasSuffix(v string) predicate.Price {
	return predicate.Price(sql.FieldHasSuffix(FieldStripeID, v))
}

// StripeIDEqualFold applies the EqualFold predicate on the "stripe_id" field.
func StripeIDEqualFold(v string) predicate.Price {
	return predicate.Price(sql.FieldEqualFold(FieldStripeID, v))
}

// StripeIDContainsFold applies the ContainsFold predicate on the "stripe_id" field.
func StripeIDContainsFold(v string) predicate.Price {
	return predicate.Price(sql.FieldContainsFold(FieldStripeID, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldAmount, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldQuantity, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldType, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Price {
	return predicate.Price(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Price {
	return predicate.Price(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Price {
	return predicate.Price(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Price) predicate.Price {
	return predicate.Price(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Price) predicate.Price {
	return predicate.Price(sql.NotPredicates(p))
}
