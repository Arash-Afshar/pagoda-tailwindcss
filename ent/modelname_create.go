// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/modelname"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/user"
)

// ModelNameCreate is the builder for creating a ModelName entity.
type ModelNameCreate struct {
	config
	mutation *ModelNameMutation
	hooks    []Hook
}

// SetFieldName sets the "field_name" field.
func (mnc *ModelNameCreate) SetFieldName(s string) *ModelNameCreate {
	mnc.mutation.SetFieldName(s)
	return mnc
}

// SetCreatedAt sets the "created_at" field.
func (mnc *ModelNameCreate) SetCreatedAt(t time.Time) *ModelNameCreate {
	mnc.mutation.SetCreatedAt(t)
	return mnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mnc *ModelNameCreate) SetNillableCreatedAt(t *time.Time) *ModelNameCreate {
	if t != nil {
		mnc.SetCreatedAt(*t)
	}
	return mnc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mnc *ModelNameCreate) SetUserID(id int) *ModelNameCreate {
	mnc.mutation.SetUserID(id)
	return mnc
}

// SetUser sets the "user" edge to the User entity.
func (mnc *ModelNameCreate) SetUser(u *User) *ModelNameCreate {
	return mnc.SetUserID(u.ID)
}

// Mutation returns the ModelNameMutation object of the builder.
func (mnc *ModelNameCreate) Mutation() *ModelNameMutation {
	return mnc.mutation
}

// Save creates the ModelName in the database.
func (mnc *ModelNameCreate) Save(ctx context.Context) (*ModelName, error) {
	mnc.defaults()
	return withHooks(ctx, mnc.sqlSave, mnc.mutation, mnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mnc *ModelNameCreate) SaveX(ctx context.Context) *ModelName {
	v, err := mnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mnc *ModelNameCreate) Exec(ctx context.Context) error {
	_, err := mnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mnc *ModelNameCreate) ExecX(ctx context.Context) {
	if err := mnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mnc *ModelNameCreate) defaults() {
	if _, ok := mnc.mutation.CreatedAt(); !ok {
		v := modelname.DefaultCreatedAt()
		mnc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mnc *ModelNameCreate) check() error {
	if _, ok := mnc.mutation.FieldName(); !ok {
		return &ValidationError{Name: "field_name", err: errors.New(`ent: missing required field "ModelName.field_name"`)}
	}
	if v, ok := mnc.mutation.FieldName(); ok {
		if err := modelname.FieldNameValidator(v); err != nil {
			return &ValidationError{Name: "field_name", err: fmt.Errorf(`ent: validator failed for field "ModelName.field_name": %w`, err)}
		}
	}
	if _, ok := mnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ModelName.created_at"`)}
	}
	if len(mnc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ModelName.user"`)}
	}
	return nil
}

func (mnc *ModelNameCreate) sqlSave(ctx context.Context) (*ModelName, error) {
	if err := mnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mnc.mutation.id = &_node.ID
	mnc.mutation.done = true
	return _node, nil
}

func (mnc *ModelNameCreate) createSpec() (*ModelName, *sqlgraph.CreateSpec) {
	var (
		_node = &ModelName{config: mnc.config}
		_spec = sqlgraph.NewCreateSpec(modelname.Table, sqlgraph.NewFieldSpec(modelname.FieldID, field.TypeInt))
	)
	if value, ok := mnc.mutation.FieldName(); ok {
		_spec.SetField(modelname.FieldFieldName, field.TypeString, value)
		_node.FieldName = value
	}
	if value, ok := mnc.mutation.CreatedAt(); ok {
		_spec.SetField(modelname.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mnc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modelname.UserTable,
			Columns: []string{modelname.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_model_names = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ModelNameCreateBulk is the builder for creating many ModelName entities in bulk.
type ModelNameCreateBulk struct {
	config
	err      error
	builders []*ModelNameCreate
}

// Save creates the ModelName entities in the database.
func (mncb *ModelNameCreateBulk) Save(ctx context.Context) ([]*ModelName, error) {
	if mncb.err != nil {
		return nil, mncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mncb.builders))
	nodes := make([]*ModelName, len(mncb.builders))
	mutators := make([]Mutator, len(mncb.builders))
	for i := range mncb.builders {
		func(i int, root context.Context) {
			builder := mncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModelNameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mncb *ModelNameCreateBulk) SaveX(ctx context.Context) []*ModelName {
	v, err := mncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mncb *ModelNameCreateBulk) Exec(ctx context.Context) error {
	_, err := mncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mncb *ModelNameCreateBulk) ExecX(ctx context.Context) {
	if err := mncb.Exec(ctx); err != nil {
		panic(err)
	}
}
