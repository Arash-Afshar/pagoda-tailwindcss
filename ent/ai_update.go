// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/ai"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/predicate"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/user"
)

// AIUpdate is the builder for updating AI entities.
type AIUpdate struct {
	config
	hooks    []Hook
	mutation *AIMutation
}

// Where appends a list predicates to the AIUpdate builder.
func (au *AIUpdate) Where(ps ...predicate.AI) *AIUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAiClientName sets the "ai_client_name" field.
func (au *AIUpdate) SetAiClientName(s string) *AIUpdate {
	au.mutation.SetAiClientName(s)
	return au
}

// SetNillableAiClientName sets the "ai_client_name" field if the given value is not nil.
func (au *AIUpdate) SetNillableAiClientName(s *string) *AIUpdate {
	if s != nil {
		au.SetAiClientName(*s)
	}
	return au
}

// SetPrompt sets the "prompt" field.
func (au *AIUpdate) SetPrompt(s string) *AIUpdate {
	au.mutation.SetPrompt(s)
	return au
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (au *AIUpdate) SetNillablePrompt(s *string) *AIUpdate {
	if s != nil {
		au.SetPrompt(*s)
	}
	return au
}

// SetStatus sets the "status" field.
func (au *AIUpdate) SetStatus(a ai.Status) *AIUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AIUpdate) SetNillableStatus(a *ai.Status) *AIUpdate {
	if a != nil {
		au.SetStatus(*a)
	}
	return au
}

// SetResult sets the "result" field.
func (au *AIUpdate) SetResult(b []byte) *AIUpdate {
	au.mutation.SetResult(b)
	return au
}

// SetCompletedAt sets the "completed_at" field.
func (au *AIUpdate) SetCompletedAt(t time.Time) *AIUpdate {
	au.mutation.SetCompletedAt(t)
	return au
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (au *AIUpdate) SetNillableCompletedAt(t *time.Time) *AIUpdate {
	if t != nil {
		au.SetCompletedAt(*t)
	}
	return au
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (au *AIUpdate) ClearCompletedAt() *AIUpdate {
	au.mutation.ClearCompletedAt()
	return au
}

// SetUserID sets the "user" edge to the User entity by ID.
func (au *AIUpdate) SetUserID(id int) *AIUpdate {
	au.mutation.SetUserID(id)
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *AIUpdate) SetUser(u *User) *AIUpdate {
	return au.SetUserID(u.ID)
}

// Mutation returns the AIMutation object of the builder.
func (au *AIUpdate) Mutation() *AIMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *AIUpdate) ClearUser() *AIUpdate {
	au.mutation.ClearUser()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AIUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AIUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AIUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AIUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AIUpdate) check() error {
	if v, ok := au.mutation.AiClientName(); ok {
		if err := ai.AiClientNameValidator(v); err != nil {
			return &ValidationError{Name: "ai_client_name", err: fmt.Errorf(`ent: validator failed for field "AI.ai_client_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.Prompt(); ok {
		if err := ai.PromptValidator(v); err != nil {
			return &ValidationError{Name: "prompt", err: fmt.Errorf(`ent: validator failed for field "AI.prompt": %w`, err)}
		}
	}
	if v, ok := au.mutation.Status(); ok {
		if err := ai.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AI.status": %w`, err)}
		}
	}
	if au.mutation.UserCleared() && len(au.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AI.user"`)
	}
	return nil
}

func (au *AIUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ai.Table, ai.Columns, sqlgraph.NewFieldSpec(ai.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.AiClientName(); ok {
		_spec.SetField(ai.FieldAiClientName, field.TypeString, value)
	}
	if value, ok := au.mutation.Prompt(); ok {
		_spec.SetField(ai.FieldPrompt, field.TypeString, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(ai.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Result(); ok {
		_spec.SetField(ai.FieldResult, field.TypeBytes, value)
	}
	if value, ok := au.mutation.CompletedAt(); ok {
		_spec.SetField(ai.FieldCompletedAt, field.TypeTime, value)
	}
	if au.mutation.CompletedAtCleared() {
		_spec.ClearField(ai.FieldCompletedAt, field.TypeTime)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ai.UserTable,
			Columns: []string{ai.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ai.UserTable,
			Columns: []string{ai.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ai.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AIUpdateOne is the builder for updating a single AI entity.
type AIUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AIMutation
}

// SetAiClientName sets the "ai_client_name" field.
func (auo *AIUpdateOne) SetAiClientName(s string) *AIUpdateOne {
	auo.mutation.SetAiClientName(s)
	return auo
}

// SetNillableAiClientName sets the "ai_client_name" field if the given value is not nil.
func (auo *AIUpdateOne) SetNillableAiClientName(s *string) *AIUpdateOne {
	if s != nil {
		auo.SetAiClientName(*s)
	}
	return auo
}

// SetPrompt sets the "prompt" field.
func (auo *AIUpdateOne) SetPrompt(s string) *AIUpdateOne {
	auo.mutation.SetPrompt(s)
	return auo
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (auo *AIUpdateOne) SetNillablePrompt(s *string) *AIUpdateOne {
	if s != nil {
		auo.SetPrompt(*s)
	}
	return auo
}

// SetStatus sets the "status" field.
func (auo *AIUpdateOne) SetStatus(a ai.Status) *AIUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AIUpdateOne) SetNillableStatus(a *ai.Status) *AIUpdateOne {
	if a != nil {
		auo.SetStatus(*a)
	}
	return auo
}

// SetResult sets the "result" field.
func (auo *AIUpdateOne) SetResult(b []byte) *AIUpdateOne {
	auo.mutation.SetResult(b)
	return auo
}

// SetCompletedAt sets the "completed_at" field.
func (auo *AIUpdateOne) SetCompletedAt(t time.Time) *AIUpdateOne {
	auo.mutation.SetCompletedAt(t)
	return auo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (auo *AIUpdateOne) SetNillableCompletedAt(t *time.Time) *AIUpdateOne {
	if t != nil {
		auo.SetCompletedAt(*t)
	}
	return auo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (auo *AIUpdateOne) ClearCompletedAt() *AIUpdateOne {
	auo.mutation.ClearCompletedAt()
	return auo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (auo *AIUpdateOne) SetUserID(id int) *AIUpdateOne {
	auo.mutation.SetUserID(id)
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *AIUpdateOne) SetUser(u *User) *AIUpdateOne {
	return auo.SetUserID(u.ID)
}

// Mutation returns the AIMutation object of the builder.
func (auo *AIUpdateOne) Mutation() *AIMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AIUpdateOne) ClearUser() *AIUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// Where appends a list predicates to the AIUpdate builder.
func (auo *AIUpdateOne) Where(ps ...predicate.AI) *AIUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AIUpdateOne) Select(field string, fields ...string) *AIUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated AI entity.
func (auo *AIUpdateOne) Save(ctx context.Context) (*AI, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AIUpdateOne) SaveX(ctx context.Context) *AI {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AIUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AIUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AIUpdateOne) check() error {
	if v, ok := auo.mutation.AiClientName(); ok {
		if err := ai.AiClientNameValidator(v); err != nil {
			return &ValidationError{Name: "ai_client_name", err: fmt.Errorf(`ent: validator failed for field "AI.ai_client_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Prompt(); ok {
		if err := ai.PromptValidator(v); err != nil {
			return &ValidationError{Name: "prompt", err: fmt.Errorf(`ent: validator failed for field "AI.prompt": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Status(); ok {
		if err := ai.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AI.status": %w`, err)}
		}
	}
	if auo.mutation.UserCleared() && len(auo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AI.user"`)
	}
	return nil
}

func (auo *AIUpdateOne) sqlSave(ctx context.Context) (_node *AI, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ai.Table, ai.Columns, sqlgraph.NewFieldSpec(ai.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AI.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ai.FieldID)
		for _, f := range fields {
			if !ai.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ai.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.AiClientName(); ok {
		_spec.SetField(ai.FieldAiClientName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Prompt(); ok {
		_spec.SetField(ai.FieldPrompt, field.TypeString, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(ai.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Result(); ok {
		_spec.SetField(ai.FieldResult, field.TypeBytes, value)
	}
	if value, ok := auo.mutation.CompletedAt(); ok {
		_spec.SetField(ai.FieldCompletedAt, field.TypeTime, value)
	}
	if auo.mutation.CompletedAtCleared() {
		_spec.ClearField(ai.FieldCompletedAt, field.TypeTime)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ai.UserTable,
			Columns: []string{ai.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ai.UserTable,
			Columns: []string{ai.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AI{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ai.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
