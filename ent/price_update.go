// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/predicate"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/price"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/product"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/user"
)

// PriceUpdate is the builder for updating Price entities.
type PriceUpdate struct {
	config
	hooks    []Hook
	mutation *PriceMutation
}

// Where appends a list predicates to the PriceUpdate builder.
func (pu *PriceUpdate) Where(ps ...predicate.Price) *PriceUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetStripeID sets the "stripe_id" field.
func (pu *PriceUpdate) SetStripeID(s string) *PriceUpdate {
	pu.mutation.SetStripeID(s)
	return pu
}

// SetNillableStripeID sets the "stripe_id" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableStripeID(s *string) *PriceUpdate {
	if s != nil {
		pu.SetStripeID(*s)
	}
	return pu
}

// SetAmount sets the "amount" field.
func (pu *PriceUpdate) SetAmount(i int) *PriceUpdate {
	pu.mutation.ResetAmount()
	pu.mutation.SetAmount(i)
	return pu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableAmount(i *int) *PriceUpdate {
	if i != nil {
		pu.SetAmount(*i)
	}
	return pu
}

// AddAmount adds i to the "amount" field.
func (pu *PriceUpdate) AddAmount(i int) *PriceUpdate {
	pu.mutation.AddAmount(i)
	return pu
}

// SetQuantity sets the "quantity" field.
func (pu *PriceUpdate) SetQuantity(i int) *PriceUpdate {
	pu.mutation.ResetQuantity()
	pu.mutation.SetQuantity(i)
	return pu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableQuantity(i *int) *PriceUpdate {
	if i != nil {
		pu.SetQuantity(*i)
	}
	return pu
}

// AddQuantity adds i to the "quantity" field.
func (pu *PriceUpdate) AddQuantity(i int) *PriceUpdate {
	pu.mutation.AddQuantity(i)
	return pu
}

// SetType sets the "type" field.
func (pu *PriceUpdate) SetType(pr price.Type) *PriceUpdate {
	pu.mutation.SetType(pr)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableType(pr *price.Type) *PriceUpdate {
	if pr != nil {
		pu.SetType(*pr)
	}
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *PriceUpdate) SetUserID(id int) *PriceUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PriceUpdate) SetUser(u *User) *PriceUpdate {
	return pu.SetUserID(u.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (pu *PriceUpdate) SetProductID(id int) *PriceUpdate {
	pu.mutation.SetProductID(id)
	return pu
}

// SetProduct sets the "product" edge to the Product entity.
func (pu *PriceUpdate) SetProduct(p *Product) *PriceUpdate {
	return pu.SetProductID(p.ID)
}

// Mutation returns the PriceMutation object of the builder.
func (pu *PriceUpdate) Mutation() *PriceMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PriceUpdate) ClearUser() *PriceUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearProduct clears the "product" edge to the Product entity.
func (pu *PriceUpdate) ClearProduct() *PriceUpdate {
	pu.mutation.ClearProduct()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PriceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PriceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PriceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PriceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PriceUpdate) check() error {
	if v, ok := pu.mutation.StripeID(); ok {
		if err := price.StripeIDValidator(v); err != nil {
			return &ValidationError{Name: "stripe_id", err: fmt.Errorf(`ent: validator failed for field "Price.stripe_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Amount(); ok {
		if err := price.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Price.amount": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Quantity(); ok {
		if err := price.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Price.quantity": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GetType(); ok {
		if err := price.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Price.type": %w`, err)}
		}
	}
	if pu.mutation.UserCleared() && len(pu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Price.user"`)
	}
	if pu.mutation.ProductCleared() && len(pu.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Price.product"`)
	}
	return nil
}

func (pu *PriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(price.Table, price.Columns, sqlgraph.NewFieldSpec(price.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.StripeID(); ok {
		_spec.SetField(price.FieldStripeID, field.TypeString, value)
	}
	if value, ok := pu.mutation.Amount(); ok {
		_spec.SetField(price.FieldAmount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAmount(); ok {
		_spec.AddField(price.FieldAmount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Quantity(); ok {
		_spec.SetField(price.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedQuantity(); ok {
		_spec.AddField(price.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(price.FieldType, field.TypeEnum, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.UserTable,
			Columns: []string{price.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.UserTable,
			Columns: []string{price.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ProductTable,
			Columns: []string{price.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ProductTable,
			Columns: []string{price.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PriceUpdateOne is the builder for updating a single Price entity.
type PriceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PriceMutation
}

// SetStripeID sets the "stripe_id" field.
func (puo *PriceUpdateOne) SetStripeID(s string) *PriceUpdateOne {
	puo.mutation.SetStripeID(s)
	return puo
}

// SetNillableStripeID sets the "stripe_id" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableStripeID(s *string) *PriceUpdateOne {
	if s != nil {
		puo.SetStripeID(*s)
	}
	return puo
}

// SetAmount sets the "amount" field.
func (puo *PriceUpdateOne) SetAmount(i int) *PriceUpdateOne {
	puo.mutation.ResetAmount()
	puo.mutation.SetAmount(i)
	return puo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableAmount(i *int) *PriceUpdateOne {
	if i != nil {
		puo.SetAmount(*i)
	}
	return puo
}

// AddAmount adds i to the "amount" field.
func (puo *PriceUpdateOne) AddAmount(i int) *PriceUpdateOne {
	puo.mutation.AddAmount(i)
	return puo
}

// SetQuantity sets the "quantity" field.
func (puo *PriceUpdateOne) SetQuantity(i int) *PriceUpdateOne {
	puo.mutation.ResetQuantity()
	puo.mutation.SetQuantity(i)
	return puo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableQuantity(i *int) *PriceUpdateOne {
	if i != nil {
		puo.SetQuantity(*i)
	}
	return puo
}

// AddQuantity adds i to the "quantity" field.
func (puo *PriceUpdateOne) AddQuantity(i int) *PriceUpdateOne {
	puo.mutation.AddQuantity(i)
	return puo
}

// SetType sets the "type" field.
func (puo *PriceUpdateOne) SetType(pr price.Type) *PriceUpdateOne {
	puo.mutation.SetType(pr)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableType(pr *price.Type) *PriceUpdateOne {
	if pr != nil {
		puo.SetType(*pr)
	}
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *PriceUpdateOne) SetUserID(id int) *PriceUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PriceUpdateOne) SetUser(u *User) *PriceUpdateOne {
	return puo.SetUserID(u.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (puo *PriceUpdateOne) SetProductID(id int) *PriceUpdateOne {
	puo.mutation.SetProductID(id)
	return puo
}

// SetProduct sets the "product" edge to the Product entity.
func (puo *PriceUpdateOne) SetProduct(p *Product) *PriceUpdateOne {
	return puo.SetProductID(p.ID)
}

// Mutation returns the PriceMutation object of the builder.
func (puo *PriceUpdateOne) Mutation() *PriceMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PriceUpdateOne) ClearUser() *PriceUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearProduct clears the "product" edge to the Product entity.
func (puo *PriceUpdateOne) ClearProduct() *PriceUpdateOne {
	puo.mutation.ClearProduct()
	return puo
}

// Where appends a list predicates to the PriceUpdate builder.
func (puo *PriceUpdateOne) Where(ps ...predicate.Price) *PriceUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PriceUpdateOne) Select(field string, fields ...string) *PriceUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Price entity.
func (puo *PriceUpdateOne) Save(ctx context.Context) (*Price, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PriceUpdateOne) SaveX(ctx context.Context) *Price {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PriceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PriceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PriceUpdateOne) check() error {
	if v, ok := puo.mutation.StripeID(); ok {
		if err := price.StripeIDValidator(v); err != nil {
			return &ValidationError{Name: "stripe_id", err: fmt.Errorf(`ent: validator failed for field "Price.stripe_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Amount(); ok {
		if err := price.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Price.amount": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Quantity(); ok {
		if err := price.QuantityValidator(v); err != nil {
			return &ValidationError{Name: "quantity", err: fmt.Errorf(`ent: validator failed for field "Price.quantity": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GetType(); ok {
		if err := price.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Price.type": %w`, err)}
		}
	}
	if puo.mutation.UserCleared() && len(puo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Price.user"`)
	}
	if puo.mutation.ProductCleared() && len(puo.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Price.product"`)
	}
	return nil
}

func (puo *PriceUpdateOne) sqlSave(ctx context.Context) (_node *Price, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(price.Table, price.Columns, sqlgraph.NewFieldSpec(price.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Price.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, price.FieldID)
		for _, f := range fields {
			if !price.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != price.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.StripeID(); ok {
		_spec.SetField(price.FieldStripeID, field.TypeString, value)
	}
	if value, ok := puo.mutation.Amount(); ok {
		_spec.SetField(price.FieldAmount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAmount(); ok {
		_spec.AddField(price.FieldAmount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Quantity(); ok {
		_spec.SetField(price.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedQuantity(); ok {
		_spec.AddField(price.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(price.FieldType, field.TypeEnum, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.UserTable,
			Columns: []string{price.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.UserTable,
			Columns: []string{price.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ProductTable,
			Columns: []string{price.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.ProductTable,
			Columns: []string{price.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Price{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
