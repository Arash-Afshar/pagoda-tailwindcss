// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/modelname"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/user"
)

// ModelName is the model entity for the ModelName schema.
type ModelName struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FieldName holds the value of the "field_name" field.
	FieldName string `json:"field_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModelNameQuery when eager-loading is set.
	Edges            ModelNameEdges `json:"edges"`
	user_model_names *int
	selectValues     sql.SelectValues
}

// ModelNameEdges holds the relations/edges for other nodes in the graph.
type ModelNameEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModelNameEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ModelName) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case modelname.FieldID:
			values[i] = new(sql.NullInt64)
		case modelname.FieldFieldName:
			values[i] = new(sql.NullString)
		case modelname.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case modelname.ForeignKeys[0]: // user_model_names
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ModelName fields.
func (mn *ModelName) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case modelname.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mn.ID = int(value.Int64)
		case modelname.FieldFieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field_name", values[i])
			} else if value.Valid {
				mn.FieldName = value.String
			}
		case modelname.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mn.CreatedAt = value.Time
			}
		case modelname.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_model_names", value)
			} else if value.Valid {
				mn.user_model_names = new(int)
				*mn.user_model_names = int(value.Int64)
			}
		default:
			mn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ModelName.
// This includes values selected through modifiers, order, etc.
func (mn *ModelName) Value(name string) (ent.Value, error) {
	return mn.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ModelName entity.
func (mn *ModelName) QueryUser() *UserQuery {
	return NewModelNameClient(mn.config).QueryUser(mn)
}

// Update returns a builder for updating this ModelName.
// Note that you need to call ModelName.Unwrap() before calling this method if this ModelName
// was returned from a transaction, and the transaction was committed or rolled back.
func (mn *ModelName) Update() *ModelNameUpdateOne {
	return NewModelNameClient(mn.config).UpdateOne(mn)
}

// Unwrap unwraps the ModelName entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mn *ModelName) Unwrap() *ModelName {
	_tx, ok := mn.config.driver.(*txDriver)
	if !ok {
		panic("ent: ModelName is not a transactional entity")
	}
	mn.config.driver = _tx.drv
	return mn
}

// String implements the fmt.Stringer.
func (mn *ModelName) String() string {
	var builder strings.Builder
	builder.WriteString("ModelName(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mn.ID))
	builder.WriteString("field_name=")
	builder.WriteString(mn.FieldName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mn.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ModelNames is a parsable slice of ModelName.
type ModelNames []*ModelName
