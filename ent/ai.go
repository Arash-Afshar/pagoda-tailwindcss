// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/ai"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/user"
)

// AI is the model entity for the AI schema.
type AI struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AiClientName holds the value of the "ai_client_name" field.
	AiClientName string `json:"ai_client_name,omitempty"`
	// Prompt holds the value of the "prompt" field.
	Prompt string `json:"prompt,omitempty"`
	// Status holds the value of the "status" field.
	Status ai.Status `json:"status,omitempty"`
	// Result holds the value of the "result" field.
	Result []byte `json:"result,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AIQuery when eager-loading is set.
	Edges        AIEdges `json:"edges"`
	user_ais     *int
	selectValues sql.SelectValues
}

// AIEdges holds the relations/edges for other nodes in the graph.
type AIEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AIEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AI) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ai.FieldResult:
			values[i] = new([]byte)
		case ai.FieldID:
			values[i] = new(sql.NullInt64)
		case ai.FieldAiClientName, ai.FieldPrompt, ai.FieldStatus:
			values[i] = new(sql.NullString)
		case ai.FieldCreatedAt, ai.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case ai.ForeignKeys[0]: // user_ais
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AI fields.
func (a *AI) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ai.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case ai.FieldAiClientName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ai_client_name", values[i])
			} else if value.Valid {
				a.AiClientName = value.String
			}
		case ai.FieldPrompt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt", values[i])
			} else if value.Valid {
				a.Prompt = value.String
			}
		case ai.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = ai.Status(value.String)
			}
		case ai.FieldResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value != nil {
				a.Result = *value
			}
		case ai.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case ai.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				a.CompletedAt = value.Time
			}
		case ai.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_ais", value)
			} else if value.Valid {
				a.user_ais = new(int)
				*a.user_ais = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AI.
// This includes values selected through modifiers, order, etc.
func (a *AI) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the AI entity.
func (a *AI) QueryUser() *UserQuery {
	return NewAIClient(a.config).QueryUser(a)
}

// Update returns a builder for updating this AI.
// Note that you need to call AI.Unwrap() before calling this method if this AI
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *AI) Update() *AIUpdateOne {
	return NewAIClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the AI entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *AI) Unwrap() *AI {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: AI is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *AI) String() string {
	var builder strings.Builder
	builder.WriteString("AI(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("ai_client_name=")
	builder.WriteString(a.AiClientName)
	builder.WriteString(", ")
	builder.WriteString("prompt=")
	builder.WriteString(a.Prompt)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", a.Result))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(a.CompletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AIs is a parsable slice of AI.
type AIs []*AI
