// Code generated by ent, DO NOT EDIT.

package ai

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Arash-Afshar/pagoda-tailwindcss/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AI {
	return predicate.AI(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AI {
	return predicate.AI(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AI {
	return predicate.AI(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AI {
	return predicate.AI(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AI {
	return predicate.AI(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AI {
	return predicate.AI(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AI {
	return predicate.AI(sql.FieldLTE(FieldID, id))
}

// AiClientName applies equality check predicate on the "ai_client_name" field. It's identical to AiClientNameEQ.
func AiClientName(v string) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldAiClientName, v))
}

// Prompt applies equality check predicate on the "prompt" field. It's identical to PromptEQ.
func Prompt(v string) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldPrompt, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v []byte) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldResult, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldCreatedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldCompletedAt, v))
}

// AiClientNameEQ applies the EQ predicate on the "ai_client_name" field.
func AiClientNameEQ(v string) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldAiClientName, v))
}

// AiClientNameNEQ applies the NEQ predicate on the "ai_client_name" field.
func AiClientNameNEQ(v string) predicate.AI {
	return predicate.AI(sql.FieldNEQ(FieldAiClientName, v))
}

// AiClientNameIn applies the In predicate on the "ai_client_name" field.
func AiClientNameIn(vs ...string) predicate.AI {
	return predicate.AI(sql.FieldIn(FieldAiClientName, vs...))
}

// AiClientNameNotIn applies the NotIn predicate on the "ai_client_name" field.
func AiClientNameNotIn(vs ...string) predicate.AI {
	return predicate.AI(sql.FieldNotIn(FieldAiClientName, vs...))
}

// AiClientNameGT applies the GT predicate on the "ai_client_name" field.
func AiClientNameGT(v string) predicate.AI {
	return predicate.AI(sql.FieldGT(FieldAiClientName, v))
}

// AiClientNameGTE applies the GTE predicate on the "ai_client_name" field.
func AiClientNameGTE(v string) predicate.AI {
	return predicate.AI(sql.FieldGTE(FieldAiClientName, v))
}

// AiClientNameLT applies the LT predicate on the "ai_client_name" field.
func AiClientNameLT(v string) predicate.AI {
	return predicate.AI(sql.FieldLT(FieldAiClientName, v))
}

// AiClientNameLTE applies the LTE predicate on the "ai_client_name" field.
func AiClientNameLTE(v string) predicate.AI {
	return predicate.AI(sql.FieldLTE(FieldAiClientName, v))
}

// AiClientNameContains applies the Contains predicate on the "ai_client_name" field.
func AiClientNameContains(v string) predicate.AI {
	return predicate.AI(sql.FieldContains(FieldAiClientName, v))
}

// AiClientNameHasPrefix applies the HasPrefix predicate on the "ai_client_name" field.
func AiClientNameHasPrefix(v string) predicate.AI {
	return predicate.AI(sql.FieldHasPrefix(FieldAiClientName, v))
}

// AiClientNameHasSuffix applies the HasSuffix predicate on the "ai_client_name" field.
func AiClientNameHasSuffix(v string) predicate.AI {
	return predicate.AI(sql.FieldHasSuffix(FieldAiClientName, v))
}

// AiClientNameEqualFold applies the EqualFold predicate on the "ai_client_name" field.
func AiClientNameEqualFold(v string) predicate.AI {
	return predicate.AI(sql.FieldEqualFold(FieldAiClientName, v))
}

// AiClientNameContainsFold applies the ContainsFold predicate on the "ai_client_name" field.
func AiClientNameContainsFold(v string) predicate.AI {
	return predicate.AI(sql.FieldContainsFold(FieldAiClientName, v))
}

// PromptEQ applies the EQ predicate on the "prompt" field.
func PromptEQ(v string) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldPrompt, v))
}

// PromptNEQ applies the NEQ predicate on the "prompt" field.
func PromptNEQ(v string) predicate.AI {
	return predicate.AI(sql.FieldNEQ(FieldPrompt, v))
}

// PromptIn applies the In predicate on the "prompt" field.
func PromptIn(vs ...string) predicate.AI {
	return predicate.AI(sql.FieldIn(FieldPrompt, vs...))
}

// PromptNotIn applies the NotIn predicate on the "prompt" field.
func PromptNotIn(vs ...string) predicate.AI {
	return predicate.AI(sql.FieldNotIn(FieldPrompt, vs...))
}

// PromptGT applies the GT predicate on the "prompt" field.
func PromptGT(v string) predicate.AI {
	return predicate.AI(sql.FieldGT(FieldPrompt, v))
}

// PromptGTE applies the GTE predicate on the "prompt" field.
func PromptGTE(v string) predicate.AI {
	return predicate.AI(sql.FieldGTE(FieldPrompt, v))
}

// PromptLT applies the LT predicate on the "prompt" field.
func PromptLT(v string) predicate.AI {
	return predicate.AI(sql.FieldLT(FieldPrompt, v))
}

// PromptLTE applies the LTE predicate on the "prompt" field.
func PromptLTE(v string) predicate.AI {
	return predicate.AI(sql.FieldLTE(FieldPrompt, v))
}

// PromptContains applies the Contains predicate on the "prompt" field.
func PromptContains(v string) predicate.AI {
	return predicate.AI(sql.FieldContains(FieldPrompt, v))
}

// PromptHasPrefix applies the HasPrefix predicate on the "prompt" field.
func PromptHasPrefix(v string) predicate.AI {
	return predicate.AI(sql.FieldHasPrefix(FieldPrompt, v))
}

// PromptHasSuffix applies the HasSuffix predicate on the "prompt" field.
func PromptHasSuffix(v string) predicate.AI {
	return predicate.AI(sql.FieldHasSuffix(FieldPrompt, v))
}

// PromptEqualFold applies the EqualFold predicate on the "prompt" field.
func PromptEqualFold(v string) predicate.AI {
	return predicate.AI(sql.FieldEqualFold(FieldPrompt, v))
}

// PromptContainsFold applies the ContainsFold predicate on the "prompt" field.
func PromptContainsFold(v string) predicate.AI {
	return predicate.AI(sql.FieldContainsFold(FieldPrompt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.AI {
	return predicate.AI(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.AI {
	return predicate.AI(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.AI {
	return predicate.AI(sql.FieldNotIn(FieldStatus, vs...))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v []byte) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v []byte) predicate.AI {
	return predicate.AI(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...[]byte) predicate.AI {
	return predicate.AI(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...[]byte) predicate.AI {
	return predicate.AI(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v []byte) predicate.AI {
	return predicate.AI(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v []byte) predicate.AI {
	return predicate.AI(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v []byte) predicate.AI {
	return predicate.AI(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v []byte) predicate.AI {
	return predicate.AI(sql.FieldLTE(FieldResult, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AI {
	return predicate.AI(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AI {
	return predicate.AI(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldLTE(FieldCreatedAt, v))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.AI {
	return predicate.AI(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.AI {
	return predicate.AI(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.AI {
	return predicate.AI(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.AI {
	return predicate.AI(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.AI {
	return predicate.AI(sql.FieldNotNull(FieldCompletedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.AI {
	return predicate.AI(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.AI {
	return predicate.AI(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AI) predicate.AI {
	return predicate.AI(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AI) predicate.AI {
	return predicate.AI(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AI) predicate.AI {
	return predicate.AI(sql.NotPredicates(p))
}
