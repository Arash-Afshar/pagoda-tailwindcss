// Code generated by ent, DO NOT EDIT.

package ai

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ai type in the database.
	Label = "ai"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAiClientName holds the string denoting the ai_client_name field in the database.
	FieldAiClientName = "ai_client_name"
	// FieldPrompt holds the string denoting the prompt field in the database.
	FieldPrompt = "prompt"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the ai in the database.
	Table = "ais"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "ais"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_ais"
)

// Columns holds all SQL columns for ai fields.
var Columns = []string{
	FieldID,
	FieldAiClientName,
	FieldPrompt,
	FieldStatus,
	FieldResult,
	FieldCreatedAt,
	FieldCompletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ais"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_ais",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// AiClientNameValidator is a validator for the "ai_client_name" field. It is called by the builders before save.
	AiClientNameValidator func(string) error
	// PromptValidator is a validator for the "prompt" field. It is called by the builders before save.
	PromptValidator func(string) error
	// DefaultResult holds the default value on creation for the "result" field.
	DefaultResult []byte
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusRunning is the default value of the Status enum.
const DefaultStatus = StatusRunning

// Status values.
const (
	StatusRunning   Status = "running"
	StatusCompleted Status = "completed"
	StatusFailed    Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusRunning, StatusCompleted, StatusFailed:
		return nil
	default:
		return fmt.Errorf("ai: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the AI queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAiClientName orders the results by the ai_client_name field.
func ByAiClientName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAiClientName, opts...).ToFunc()
}

// ByPrompt orders the results by the prompt field.
func ByPrompt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrompt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
